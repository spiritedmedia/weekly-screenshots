/* global screenReaderText */
/**
 * Theme functions file.
 *
 * Contains handlers for navigation and widget area.
 */

( function( $ ) {
	var body, masthead, menuToggle, siteNavigation, socialNavigation, siteHeaderMenu, resizeTimer;

	function initMainNavigation( container ) {

		// Add dropdown toggle that displays child menu items.
		var dropdownToggle = $( '<button />', {
			'class': 'dropdown-toggle',
			'aria-expanded': false
		} ).append( $( '<span />', {
			'class': 'screen-reader-text',
			text: screenReaderText.expand
		} ) );

		container.find( '.menu-item-has-children > a' ).after( dropdownToggle );

		// Toggle buttons and submenu items with active children menu items.
		container.find( '.current-menu-ancestor > button' ).addClass( 'toggled-on' );
		container.find( '.current-menu-ancestor > .sub-menu' ).addClass( 'toggled-on' );

		// Add menu items with submenus to aria-haspopup="true".
		container.find( '.menu-item-has-children' ).attr( 'aria-haspopup', 'true' );

		container.find( '.dropdown-toggle' ).click( function( e ) {
			var _this            = $( this ),
				screenReaderSpan = _this.find( '.screen-reader-text' );

			e.preventDefault();
			_this.toggleClass( 'toggled-on' );
			_this.next( '.children, .sub-menu' ).toggleClass( 'toggled-on' );

			// jscs:disable
			_this.attr( 'aria-expanded', _this.attr( 'aria-expanded' ) === 'false' ? 'true' : 'false' );
			// jscs:enable
			screenReaderSpan.text( screenReaderSpan.text() === screenReaderText.expand ? screenReaderText.collapse : screenReaderText.expand );
		} );
	}
	initMainNavigation( $( '.main-navigation' ) );

	masthead         = $( '#masthead' );
	menuToggle       = masthead.find( '#menu-toggle' );
	siteHeaderMenu   = masthead.find( '#site-header-menu' );
	siteNavigation   = masthead.find( '#site-navigation' );
	socialNavigation = masthead.find( '#social-navigation' );

	// Enable menuToggle.
	( function() {

		// Return early if menuToggle is missing.
		if ( ! menuToggle.length ) {
			return;
		}

		// Add an initial values for the attribute.
		menuToggle.add( siteNavigation ).add( socialNavigation ).attr( 'aria-expanded', 'false' );

		menuToggle.on( 'click.twentysixteen', function() {
			$( this ).add( siteHeaderMenu ).toggleClass( 'toggled-on' );

			// jscs:disable
			$( this ).add( siteNavigation ).add( socialNavigation ).attr( 'aria-expanded', $( this ).add( siteNavigation ).add( socialNavigation ).attr( 'aria-expanded' ) === 'false' ? 'true' : 'false' );
			// jscs:enable
		} );
	} )();

	// Fix sub-menus for touch devices and better focus for hidden submenu items for accessibility.
	( function() {
		if ( ! siteNavigation.length || ! siteNavigation.children().length ) {
			return;
		}

		// Toggle `focus` class to allow submenu access on tablets.
		function toggleFocusClassTouchScreen() {
			if ( window.innerWidth >= 910 ) {
				$( document.body ).on( 'touchstart.twentysixteen', function( e ) {
					if ( ! $( e.target ).closest( '.main-navigation li' ).length ) {
						$( '.main-navigation li' ).removeClass( 'focus' );
					}
				} );
				siteNavigation.find( '.menu-item-has-children > a' ).on( 'touchstart.twentysixteen', function( e ) {
					var el = $( this ).parent( 'li' );

					if ( ! el.hasClass( 'focus' ) ) {
						e.preventDefault();
						el.toggleClass( 'focus' );
						el.siblings( '.focus' ).removeClass( 'focus' );
					}
				} );
			} else {
				siteNavigation.find( '.menu-item-has-children > a' ).unbind( 'touchstart.twentysixteen' );
			}
		}

		if ( 'ontouchstart' in window ) {
			$( window ).on( 'resize.twentysixteen', toggleFocusClassTouchScreen );
			toggleFocusClassTouchScreen();
		}

		siteNavigation.find( 'a' ).on( 'focus.twentysixteen blur.twentysixteen', function() {
			$( this ).parents( '.menu-item' ).toggleClass( 'focus' );
		} );
	} )();

	// Add the default ARIA attributes for the menu toggle and the navigations.
	function onResizeARIA() {
		if ( window.innerWidth < 910 ) {
			if ( menuToggle.hasClass( 'toggled-on' ) ) {
				menuToggle.attr( 'aria-expanded', 'true' );
			} else {
				menuToggle.attr( 'aria-expanded', 'false' );
			}

			if ( siteHeaderMenu.hasClass( 'toggled-on' ) ) {
				siteNavigation.attr( 'aria-expanded', 'true' );
				socialNavigation.attr( 'aria-expanded', 'true' );
			} else {
				siteNavigation.attr( 'aria-expanded', 'false' );
				socialNavigation.attr( 'aria-expanded', 'false' );
			}

			menuToggle.attr( 'aria-controls', 'site-navigation social-navigation' );
		} else {
			menuToggle.removeAttr( 'aria-expanded' );
			siteNavigation.removeAttr( 'aria-expanded' );
			socialNavigation.removeAttr( 'aria-expanded' );
			menuToggle.removeAttr( 'aria-controls' );
		}
	}

	// Add 'below-entry-meta' class to elements.
	function belowEntryMetaClass( param ) {
		if ( body.hasClass( 'page' ) || body.hasClass( 'search' ) || body.hasClass( 'single-attachment' ) || body.hasClass( 'error404' ) ) {
			return;
		}

		$( '.entry-content' ).find( param ).each( function() {
			var element              = $( this ),
				elementPos           = element.offset(),
				elementPosTop        = elementPos.top,
				entryFooter          = element.closest( 'article' ).find( '.entry-footer' ),
				entryFooterPos       = entryFooter.offset(),
				entryFooterPosBottom = entryFooterPos.top + ( entryFooter.height() + 28 ),
				caption              = element.closest( 'figure' ),
				newImg;

			// Add 'below-entry-meta' to elements below the entry meta.
			if ( elementPosTop > entryFooterPosBottom ) {

				// Check if full-size images and captions are larger than or equal to 840px.
				if ( 'img.size-full' === param ) {

					// Create an image to find native image width of resized images (i.e. max-width: 100%).
					newImg = new Image();
					newImg.src = element.attr( 'src' );

					$( newImg ).on( 'load.twentysixteen', function() {
						if ( newImg.width >= 840  ) {
							element.addClass( 'below-entry-meta' );

							if ( caption.hasClass( 'wp-caption' ) ) {
								caption.addClass( 'below-entry-meta' );
								caption.removeAttr( 'style' );
							}
						}
					} );
				} else {
					element.addClass( 'below-entry-meta' );
				}
			} else {
				element.removeClass( 'below-entry-meta' );
				caption.removeClass( 'below-entry-meta' );
			}
		} );
	}

	function membershipForm() {
		var $donateForm = $('[data-donate-form]');
		var $amountInput = $donateForm.find('[data-donate-form-amount]');

		// Handle the changing donation form action URL
		var endpointDomain = $donateForm.data('nrh-endpoint-domain');
		$donateForm.on('change', '[data-donate-form-frequency]', function(e) {
			var endpointPath;
			if ($(this).val() === '') {
				endpointPath = '/donateform';
			} else {
				endpointPath = '/memberform';
			}
			$donateForm.attr('action', endpointDomain + endpointPath);
		});

		// Handle maths for various installation periods
		var prevPeriod;
		$donateForm.on('change', '[data-donate-form-frequency]', function(e) {
			var defaultAmount = $amountInput.attr('value');
			var currentPeriod = $(this).val();
			var oldAmount = parseInt($amountInput.val());
			var newAmount = oldAmount;

			if (
				(currentPeriod === 'yearly' && prevPeriod !== '') ||
				(currentPeriod === '' && prevPeriod !== 'yearly')
			) {
				newAmount = oldAmount * 12;
			} else if (currentPeriod === 'monthly') {
				newAmount = oldAmount / 12;
			}

			newAmount = Math.ceil(newAmount);
			$amountInput.val(newAmount);
			prevPeriod = currentPeriod;
		});

		// Set up a custom error message for invalid amount
		$amountInput.on('change', function () {
			// Get a vanilla JS object so we can work with native validation
			var amountInput = $amountInput.get(0);
			amountInput.setCustomValidity('');
			if (!amountInput.checkValidity()) {
				amountInput.setCustomValidity('Please enter a dollar amount greater than $1.');
			}
		});
	}

	$( document ).ready( function() {
		body = $( document.body );

		$( window )
			.on( 'load.twentysixteen', onResizeARIA )
			.on( 'resize.twentysixteen', function() {
				clearTimeout( resizeTimer );
				resizeTimer = setTimeout( function() {
					belowEntryMetaClass( 'img.size-full' );
					belowEntryMetaClass( 'blockquote.alignleft, blockquote.alignright' );
				}, 300 );
				onResizeARIA();
			} );

		$('#main .search-field').focus();

		membershipForm();

		belowEntryMetaClass( 'img.size-full' );
		belowEntryMetaClass( 'blockquote.alignleft, blockquote.alignright' );
	} );

	$.fn.almDone = function(){
	   if ($('body').hasClass('single')) {
		   var termLink = $('#term-link').data( 'caturl' );
		   $('#load-more').text('Read More Denver News').removeClass('done');
		   $('#main').on('click', '#load-more', function() {
			   window.location = termLink;
		   });
	   }



	};

	// master slider goes bonkers. Reset its size by triggering a windwo resize.
	$.fn.almComplete = function(alm){
		$(window).trigger('resize');
	};


	// new psots bubbles
	// if ( $('body').hasClass('home') || $('body').hasClass('category-denver-news') || $('body').hasClass('category-denver-sports-news') || $('body').hasClass('category-business') || $('body').hasClass('category-entertainment' )) {

			var data = {
				action: 'denverite_get_posts_since_last_visit',
				// nonce: screenReaderText.ajax_nonce
			};


			$.ajax({
				url: screenReaderText.ajax_url,
				data: data,
				success:function(data){
					if (data.total_posts) {
						updateNavBubbles( data );
						$('#site-navigation').addClass('new-posts-nav');
						$('#site-navigation').removeClass('no-posts');
					}
				}
			});

	// }


	$('.denverite-menu a').on('click', function(event) {
		menuID = $(this).prop( 'id' );
		sessionStorage[menuID] = true;
	});


	function updateNavBubbles( posts ){
		$.each(posts, function(index, val) {
			var targetID = '#' + index;
			if (sessionStorage[index] != 'true') {
				if ( val > 99 ) {
					val = '99+';
				}
				$(targetID).find('.new-posts').text(val).css('display', 'block');
			}
		});
	}

	$( document ).ready(function() {
	  $('.hamburger').click(function() {
		 $(this).toggleClass('active');
		 $('#site-navigation').toggleClass('in');
		 return false;
	  });
	});

	var PedUtils = {

	  /**
	   * Execute a function only once after a defined interval of time
	   *
	   * Example: for firing an event after xms after typing in an input
	   *
	   * @see https://john-dugan.com/javascript-debounce/
	   * @param  function func      A callback to be fired
	   * @param  int      wait      How long to delay firing the callback
	   * @param  bool     immediate Whether to fire the callback immediatly
	   */
	  debounce: function(func, wait, immediate) {
		var timeout;
		return function() {
		  var context = this;
		  var args = arguments;
		  var later = function() {
			timeout = null;
			if ( !immediate ) {
			  func.apply(context, args);
			}
		  };
		  var callNow = immediate && !timeout;
		  clearTimeout(timeout);
		  timeout = setTimeout(later, wait || 200);
		  if ( callNow ) {
			func.apply(context, args);
		  }
		};
	  },

	  /**
	   * Throttle a function when you want it to execute periodically
	   *
	   * Example: Scrolling, resizing events
	   *
	   * @see http://sampsonblog.com/749/simple-throttle-function
	   * @param  {function} callback  A callback to be fired
	   * @param  {int}      limit     The delay between executions
	   */
	  throttle: function(callback, limit) {
		var wait = false;
		return function () {
		  if (!wait) {
			callback.call();
			wait = true;
			setTimeout(function () {
			  wait = false;
			}, limit);
		  }
		};
	  }

	};

	/**
	 * Convert a string to camelCase
	 *
	 * @return {string} camelCase string
	 */
	String.prototype.toCamelCase = function() {
	  return this
		.replace(/\s(.)/g, function(s) { return s.toUpperCase(); })
		.replace(/\s/g, '')
		.replace(/^(.)/, function(s) { return s.toLowerCase(); });
	};

	/**
	 * Capitalize the first letter of a string
	 *
	 * @return {string}
	 */
	String.prototype.capFirst = function() {
	  return this.charAt(0).toUpperCase() + this.slice(1);
	};

	(function(selector, label, percs) {
		function sendEvent(action, label, value) {
			void 0 !== window.ga && window.ga("send", "event", "Scroll Depth", action, label, value, {
				nonInteraction: !0
			});
		}
		var $ = jQuery, $window = $(window), cache = [];
		if (this.selector = selector, this.label = label, this.percs = percs, this.$element = $(this.selector),
		this.eventNamespace = "scroll.depth" + this.label.toCamelCase().capFirst(), this.$element.length) {
			var calculateMarks = $.proxy(function() {
				var perc, markKey, marks = {}, percs = this.percs, offset = this.$element.offset().top, height = this.$element.height();
				percs.sort(function(a, b) {
					return a - b;
				});

				// Gotta account for that figure element just thrown into the
				// top of every post... that might skew the scroll results a bit...
				var $featImg = this.$element.find('> .wp-caption:first-child:first-of-type');
				if ($featImg.length) {
					var featImgHeight = $featImg.outerHeight();
					// console.log(featImgHeight);
					offset = $featImg.offset().top + featImgHeight;
					height -= featImgHeight;
				}

				// Also gotta account for the share buttons and author bio
				// thrown into the bottom of `.entry-content`...
				var $shareBtns = this.$element.find('.sharedaddy');
				var $authorInfo = this.$element.find('.author-info');
				if ($shareBtns.length) {
					height = ($shareBtns.offset().top - offset);
				} else if ($authorInfo.length) {
					height = ($authorInfo.offset().top - offset);
				}

				for (var i = 0; i < percs.length; i++) switch (perc = percs[i], markKey = perc + "%",
				perc) {
				  case 0:
					marks[markKey] = offset;
					break;

				  case 100:
					marks[markKey] = height - 5 + offset;
					break;

				  default:
					marks[markKey] = parseInt(height * (.01 * perc), 10) + offset;
				}
				return marks;
			}, this), checkElements = $.proxy(function(depth) {
				if (this.$element.length && depth >= this.$element.offset().top) {
					var percInt;
					$.each(calculateMarks(), $.proxy(function(perc, coordY) {
						-1 === $.inArray(perc, cache) && depth >= coordY && (percInt = Math.round(parseFloat(perc)),
						sendEvent(perc, this.label, percInt), cache.push(perc));
					}, this));
				}
			}, this);
			$window.on(this.eventNamespace, PedUtils.throttle($.proxy(function() {
				var winHeight = window.innerHeight || $window.height(), scrollDepth = $window.scrollTop() + winHeight;
				cache.length >= this.percs.length || !this.$element.length ? $window.off(this.eventNamespace) : checkElements(scrollDepth);
			}, this), 750));
		}
	}('.entry-content', 'Entry Content', [0, 50, 100]));

} )( jQuery );
